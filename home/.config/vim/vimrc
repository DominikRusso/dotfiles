" => General {{{

" disable vi backward compatibility
set nocompatible

let mapleader=" "

set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

" don't redraw when not necessary
" dramatically speeds up macros
set lazyredraw

" hide, don't close, buffer on abandon
set hidden

" no backup files (this does not include swap files)
set nobackup
set nowritebackup

" don't break in the middle of a word
set linebreak

" no double spacing after punctuation when joining lines
set nojoinspaces

" stop lines being broken at 80 chars
set tw=0

filetype plugin indent on

" yank into system clipboard too
set clipboard^=unnamedplus

" }}}

" => Plugins {{{

set runtimepath^=~/.config/vim
set runtimepath^=~/.config/vim/after

call plug#begin('~/.config/vim/plugged')

" general enhancements
Plug '/usr/local/opt/fzf'
Plug 'airblade/vim-rooter'
Plug 'editorconfig/editorconfig-vim'
Plug 'inkarkat/vim-AdvancedSorters'
Plug 'inkarkat/vim-ingo-library'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-peekaboo'
Plug 'qpkorr/vim-renamer'
Plug 'sirver/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'vimwiki/vimwiki'

" language support
Plug 'lervag/vimtex'
Plug 'rust-lang/rust.vim'

" visual enhancements
Plug 'itchyny/lightline.vim'

call plug#end()

" }}}

" => Plugin Customization {{{

" lightline
let g:lightline = {
            \ 'colorscheme': 'one'
            \ }

" rust.vim
" run rustfmt on write
let g:rustfmt_autosave = 1
" use rustfmt >= 0.7 options
let g:rustfmt_emit_files = 1

" ultisnips
let g:UltiSnipsSnippetDirectories=[$XDG_CONFIG_HOME.'/vim/UltiSnips']
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'

" vim-rooter
" stop changing directory automatically
let g:rooter_manual_only = 1

" vimtex
" disable quickfix mode
let g:vimtex_quickfix_mode=0
" set pdf viewer to zathura
let g:vimtex_view_method='zathura'

" vimwiki
" disable the creation of temporary wikis
let g:vimwiki_global_ext = 0
" wiki config
let g:vimwiki_list = [{'path': '~/docs/wiki/',
                        \ 'syntax': 'markdown', 'ext': '.md',
                        \ 'links_space_char': '-'}]

" }}}

" => In-Buffer Navigation {{{

" disable arrow keys in all modes except command mode
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

nnoremap <leader>r :Rooter<CR>

" }}}

" => Meta Navigation {{{

" split in TTB and LTR directions
set splitbelow splitright

" abbreviate key chords for moving between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" buffer navigation
nnoremap <silent> [b :bp<CR>
nnoremap <silent> ]b :bn<CR>
nnoremap <silent> [B :bf<CR>
nnoremap <silent> ]B :bl<CR>

" left and right arrow keys switch buffers
nnoremap <silent> <Left> :bp<CR>
nnoremap <silent> <Right> :bn<CR>

" depends on fzf
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fh :History<CR>
nnoremap <leader>fch :History:<CR>
nnoremap <leader>fl :Lines<CR>
nnoremap <leader>fm :Marks<CR>
" additionally depends on UltiSnips
nnoremap <leader>fs :Snippets<CR>

" }}}

" => Indenting {{{

" copy indent onto next line
set autoindent

" infer indentation of next line
set smartindent

" preserve indentation on line wraps
set breakindent

" use shiftwidth value for softtabstop
set softtabstop=-1
" use tabstop value for shiftwidth
set shiftwidth=0

" the editorconfig plugin and `ftplugin/after` handle
" tabstop and expandtab

" default values for when no filetype is detected
set noexpandtab
set tabstop=4

" }}}

" => Searching {{{

" case insensitive search
set ignorecase

" except when query contains uppercase
set smartcase


" }}}

" => Deleting {{{

" backspace over everything in insert mode
set backspace=indent,eol,start

" }}}

" => Substituting {{{

" live preview of substitution in progress
set inccommand=nosplit

" }}}

" => Visual & UI {{{

" enable syntax highlighting
syntax on

" source colors
source $HOME/.config/vim/colors.vim

" hybrid line numbering
set number relativenumber

if has("patch-8.1.1564")
  " have signcolumn merge with number column
  set signcolumn=number
else
  " enable signcolumn
  set signcolumn=yes
endif

" compress gutter
set numberwidth=3

" disable (duplicate) info about mode
set noshowmode

" a: use all abbreviations available
" I: no splash screen
set shortmess=aI

" set scroll offset to 3 lines
set scrolloff=3

" enable wildmenu
set wildmenu

" complete longest common match and show wildmenu
set wildmode=longest:full,full

" show matching brackets
set showmatch

" but don't move cursor back
set mat=0

" disable error bells
set noerrorbells
set visualbell
set t_vb=

" for regular vim only
if !has('nvim')
  " solid vertical bar in insert mode
  let &t_SI = "\<Esc>[6 q"
  " solid underscore cursor in replace mode
  let &t_SR = "\<Esc>[4 q"
  " solid block cursor in normal mode
  let &t_EI = "\<Esc>[2 q"
endif

" }}}

" => Behavior & Commands {{{

" allow saving files as root when vim not invoked as such
cmap w!! w !sudo tee >/dev/null %

" easy expansion of active file directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" unmap F1 from help
map <F1> <Esc>
imap <F1> <Esc>

nnoremap <leader>m :make<CR>
nnoremap <leader>n :noh<CR>
nnoremap <leader>se :setlocal spell! spelllang=en_us<CR>
nnoremap <leader>sg :setlocal spell! spelllang=de_de<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap <leader>w :w<CR>

" delete trailing whitespace on save
function! StripTrailingWhitespace()
  let l:view = winsaveview()
  keepp %s/\s\+$//e
  call winrestview(l:view)
endfunction

au BufWritePre * silent :call StripTrailingWhitespace()

" no auto-commenting on newline
au FileType * setlocal fo-=c fo-=r fo-=o

" auto read external file changes
set autoread
au BufEnter,CursorHold,FocusGained * checktime

" absolute + relative line numbering when buffer in focus
" absolute line numbering when buffer not in focus
" does not toggle if `number` has been disabled
augroup numbertoggle
  autocmd!
  au BufEnter,FocusGained * if (&number) | set relativenumber | endif
  au BufLeave,FocusLost   * if (&number) | set norelativenumber | endif
augroup END

" }}}

" => File Type Specific Settings {{{

" git commit messages
" turn on spell check in git commits
au FileType gitcommit set spell

" TeX
" default to LaTeX when editing tex files
let g:tex_flavor='latex'

" }}}

" => Security {{{

" disable commands being run from local .vimrcs and .exrcs
set secure

"}}}

" vim: fdm=marker
