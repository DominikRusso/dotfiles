" => General {{{

" disable vi backward compatibility
set nocompatible

let mapleader=" "

set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

" don't redraw when not necessary
" dramatically speeds up macros
set lazyredraw

" hide, don't close, buffer on abandon
set hidden

" no backup files (this does not include swap files)
set nobackup
set nowritebackup

" don't break in the middle of a word
set linebreak

" no double spacing after punctuation when joining lines
set nojoinspaces

" stop lines being broken at 80 chars
set tw=0

filetype plugin indent on

" }}}

" => Plugins {{{

set runtimepath^=~/.config/vim
set runtimepath^=~/.config/vim/after

call plug#begin('~/.config/vim/plugged')

" general enhancements
Plug '/usr/local/opt/fzf'
Plug 'airblade/vim-rooter'
Plug 'editorconfig/editorconfig-vim'
Plug 'inkarkat/vim-AdvancedSorters'
Plug 'inkarkat/vim-ingo-library'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-peekaboo'
Plug 'sirver/ultisnips'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'

" language support
Plug 'lervag/vimtex'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'rust-lang/rust.vim'

" visual enhancements
Plug 'itchyny/lightline.vim'

call plug#end()

" }}}

" => Plugin Customization {{{

" coc
" set coc config file location
let g:coc_config_home='~/.config/vim'

" " Give more space for displaying messages.
" set cmdheight=2

" Having longer updatetime (default is 4000 ms) leads to noticeable delays
" and poor user experience.
set updatetime=300

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <leader>[g <Plug>(coc-diagnostic-prev)
nmap <silent> <leader>]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> <leader>gd <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f <Plug>(coc-format-selected)
nmap <leader>f <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a <Plug>(coc-codeaction-selected)
nmap <leader>a <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" NeoVim-only mapping for visual mode scroll
" Useful on signatureHelp after jump placeholder of snippet expansion
if has('nvim')
  vnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#nvim_scroll(1, 1) : "\<C-f>"
  vnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#nvim_scroll(0, 1) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p :<C-u>CocListResume<CR>

" lightline
let g:lightline = {
            \ 'colorscheme': 'one'
            \ }

" rust
" run rustfmt on write
let g:rustfmt_autosave = 1
" use rustfmt >= 0.7 options
let g:rustfmt_emit_files = 1

" ultisnips
let g:UltiSnipsSnippetDirectories=[$XDG_CONFIG_HOME.'/vim/UltiSnips']
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<c-k>'

" vim rooter
" stop vim-rooter changing directory automatically
let g:rooter_manual_only = 1

" vimtex
" disable quickfix mode
let g:vimtex_quickfix_mode=0
" set pdfviewer to zathura
let g:vimtex_view_method='zathura'

" }}}

" => In-Buffer Navigation {{{

" disable arrow keys in all modes except command mode
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

nnoremap <leader>r :Rooter<CR>

" }}}

" => Meta Navigation {{{

" split in TTB and LTR directions
set splitbelow splitright

" abbreviate key chords for moving between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" buffer navigation
nnoremap <silent> [b :bp<CR>
nnoremap <silent> ]b :bn<CR>
nnoremap <silent> [B :bf<CR>
nnoremap <silent> ]B :bl<CR>

" left and right arrow keys switch buffers
nnoremap <silent> <left> :bp<CR>
nnoremap <silent> <right> :bn<CR>

" depends on fzf
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fh :History<CR>
nnoremap <leader>fch :History:<CR>
nnoremap <leader>fl :Lines<CR>
nnoremap <leader>fm :Marks<CR>
" additionally depends on UltiSnips
nnoremap <leader>fs :Snippets<CR>

" }}}

" => Indenting {{{

" copy indent onto next line
set autoindent

" infer indentation of next line
set smartindent

" preserve indentation on line wraps
set breakindent

" the editorconfig plugin handles tabstop,
" softtabstop, shiftwidth and expandtab
" use shiftwidth value for softtabstop
set softtabstop=-1

" }}}

" => Searching {{{

" case insensitive search
set ignorecase

" except when query contains uppercase
set smartcase


" }}}

" => Deleting {{{

" backspace over everything in insert mode
set backspace=indent,eol,start

" }}}

" => Substituting {{{

" live preview of substitution in progress
set inccommand=nosplit

" }}}

" => Visual & UI {{{

" enable syntax highlighting
syntax on

" source colors
source $HOME/.config/vim/colors.vim

" hybrid line numbering
set number relativenumber

if has("patch-8.1.1564")
  " have signcolumn merge with number column
  set signcolumn=number
else
  " enable signcolumn
  set signcolumn=yes
endif

" compress gutter
set numberwidth=3

" disable (duplicate) info about mode
set noshowmode

" a: use all abbreviations available
" c: don't show ins-completion-menu messages (required by coc)
" I: no splash screen
set shortmess=acI

" set scroll offset to 3 lines
set scrolloff=3

" enable wildmenu
set wildmenu

" complete longest common match and show wildmenu
set wildmode=longest:full,full

" show matching brackets
set showmatch

" but don't move cursor back
set mat=0

" disable error bells
set noerrorbells
set visualbell
set t_vb=

" for regular vim only
if !has('nvim')
  " solid vertical bar in insert mode
  let &t_SI = "\<Esc>[6 q"
  " solid underscore cursor in replace mode
  let &t_SR = "\<Esc>[4 q"
  " solid block cursor in normal mode
  let &t_EI = "\<Esc>[2 q"
endif

" }}}

" => Behavior & Commands {{{

" allow saving files as root when vim not invoked as such
cmap w!! w !sudo tee >/dev/null %

" easy expansion of active file directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" unmap F1 from help
map <F1> <Esc>
imap <F1> <Esc>

nnoremap <leader>m :make<CR>
nnoremap <leader>n :noh<CR>
nnoremap <leader>se :setlocal spell! spelllang=en_us<CR>
nnoremap <leader>sg :setlocal spell! spelllang=de_de<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap <leader>w :w<CR>

" delete trailing whitespace on save
function! StripTrailingWhitespace()
  let l:view = winsaveview()
  keepp %s/\s\+$//e
  call winrestview(l:view)
endfunction

au BufWritePre * silent :call StripTrailingWhitespace()

" no auto-commenting on newline
au FileType * setlocal fo-=c fo-=r fo-=o

" auto read external file changes
set autoread
au BufEnter,CursorHold,FocusGained * checktime

" absolute + relative line numbering when buffer in focus
" absolute line numbering when buffer not in focus
" does not toggle if `number` has been disabled
augroup numbertoggle
  autocmd!
  au BufEnter,FocusGained * if (&number) | set relativenumber | endif
  au BufLeave,FocusLost   * if (&number) | set norelativenumber | endif
augroup END

" }}}

" => File Type Specific Settings {{{

" git commit messages
" turn on spell check in git commits
au FileType gitcommit set spell

" TeX
" default to LaTeX when editing tex files
let g:tex_flavor='latex'

" }}}

" => Security {{{

" disable commands being run from local .vimrcs and .exrcs
set secure

"}}}

" vim: fdm=marker
