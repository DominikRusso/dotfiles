" => General {{{

" disable vi backward compatibility
set nocompatible

let mapleader=" "

set encoding=utf-8
set fileencoding=utf-8
set termencoding=utf-8

" don't redraw when not necessary
" dramatically speeds up macros
set lazyredraw

" hide -- don't close -- buffer on abandon
set hidden

" no backup files (this does not include swap files)
set nobackup
set nowritebackup

" don't break in the middle of a word
set linebreak

" no double spacing after punctuation when joining lines
set nojoinspaces

" stop lines being broken at 80 chars
set tw=0

filetype plugin indent on

" make sure mouse is disabled
set mouse=

" yank into system clipboard too
set clipboard^=unnamedplus

" }}}

" => Plugins {{{

set runtimepath^=~/.config/vim
set runtimepath^=~/.config/vim/after

call plug#begin('~/.config/vim/plugged')

" general enhancements
Plug '/usr/local/opt/fzf'
Plug 'airblade/vim-rooter'
Plug 'bronson/vim-visual-star-search'
Plug 'editorconfig/editorconfig-vim'
Plug 'inkarkat/vim-AdvancedSorters'
Plug 'inkarkat/vim-ingo-library'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-peekaboo'
Plug 'qpkorr/vim-renamer'
Plug 'sirver/ultisnips' " possibly switch to LuaSnips?
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-surround'
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }

" language support
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/nvim-cmp'
Plug 'lervag/vimtex'
Plug 'neoclide/jsonc.vim'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/lsp_extensions.nvim'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'
Plug 'ray-x/lsp_signature.nvim'
Plug 'rust-lang/rust.vim'
" Plug 'simrat39/rust-tools.nvim'

" visual enhancements
Plug 'itchyny/lightline.vim'

call plug#end()

" }}}

" => Plugin Customization {{{

" LSP
lua << EOF
-- Setup nvim-cmp.
local cmp = require'cmp'

cmp.setup({
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
    end,
  },
  mapping = {
    ['<Tab>'] = cmp.mapping.confirm({ select = true }),
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),

    ['<C-d>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
    ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
    ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
    ['<C-e>'] = cmp.mapping({
      i = cmp.mapping.abort(),
      c = cmp.mapping.close(),
    }),
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'ultisnips' },
    { name = 'path' },
    { name = 'buffer' },
  },
  experimental = {
    ghost_text = true,
  },
})

cmp.setup.cmdline('/', {
  sources = {
    { name = 'buffer' }
  }
})

cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
    { name = 'path' }
  })
})

local lspconfig = require('lspconfig')

-- use an on_attach function to only map the following keys after the language
-- server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>r', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>a', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

  -- Get signatures (and only signatures) when in argument lists.
  require "lsp_signature".on_attach({
    doc_lines = 0,
    handler_opts = {
      border = "none"
    },
  })
end

local capabilities = require('cmp_nvim_lsp').default_capabilities()

-- c and cpp
lspconfig.clangd.setup {
  on_attach = on_attach,
  capabilities = capabilities,
}

-- html
lspconfig.html.setup {
  on_attach = on_attach,
  capabilities = capabilities,
}

-- python
lspconfig.pyright.setup {
  on_attach = on_attach,
  capabilities = capabilities,
}

-- rust
lspconfig.rust_analyzer.setup {
  on_attach = on_attach,
  settings = {
    ["rust-analyzer"] = {
      cargo = {
        allFeatures = true,
      },
    },
  },
  capabilities = capabilities,
}

-- typescript
lspconfig.tsserver.setup {
  on_attach = on_attach,
  capabilities = capabilities,
}
EOF

" Enable type inlay hints
autocmd CursorHold,CursorHoldI *.rs :lua require'lsp_extensions'.inlay_hints{ only_current_line = true }

" lightline
let g:lightline = {
            \ 'colorscheme': 'one'
            \ }

" rust.vim
" run rustfmt on write
let g:rustfmt_autosave = 1
" use rustfmt >= 0.7 options
let g:rustfmt_emit_files = 1

" ultisnips
let g:UltiSnipsSnippetDirectories=[$XDG_CONFIG_HOME.'/vim/UltiSnips']
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<c-j>'
let g:UltiSnipsJumpBackwardTrigger = '<nop>'

" vim-rooter
" stop changing directory automatically
let g:rooter_manual_only = 1

" vimtex
" disable quickfix mode
let g:vimtex_quickfix_mode=0
" set pdf viewer to zathura
let g:vimtex_view_method='zathura'

" vimwiki
" disable the creation of temporary wikis
let g:vimwiki_global_ext = 0
" disable html mappings
let g:vimwiki_key_mappings = { 'html': 0 }
" wiki config
let g:vimwiki_list = [{'path': '~/docs/wiki/',
                        \ 'syntax': 'markdown', 'ext': '.md',
                        \ 'links_space_char': '-',
                        \ 'links_lowercase': 1}]

" }}}

" => In-Buffer Navigation {{{

" disable arrow keys in all modes except command mode
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

nnoremap <leader>r :Rooter<CR>

" }}}

" => Meta Navigation {{{

" split in TTB and LTR directions
set splitbelow splitright

" abbreviate key chords for moving between splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" buffer navigation
nnoremap <silent> [b :bp<CR>
nnoremap <silent> ]b :bn<CR>
nnoremap <silent> [B :bf<CR>
nnoremap <silent> ]B :bl<CR>

" left and right arrow keys switch buffers
nnoremap <silent> <Left> :bp<CR>
nnoremap <silent> <Right> :bn<CR>

" depends on fzf
nnoremap <leader>fb :Buffers<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fh :History<CR>
nnoremap <leader>fch :History:<CR>
nnoremap <leader>fl :Lines<CR>
nnoremap <leader>fm :Marks<CR>
" additionally depends on UltiSnips
nnoremap <leader>fs :Snippets<CR>

" }}}

" => Indenting {{{

" copy indent onto next line
set autoindent

" infer indentation of next line
set smartindent

" preserve indentation on line wraps
set breakindent

" use shiftwidth value for softtabstop
set softtabstop=-1
" use tabstop value for shiftwidth
set shiftwidth=0

" the editorconfig plugin and `ftplugin/after` handle
" tabstop and expandtab

" default values for when no filetype is detected
set noexpandtab
set tabstop=4

" }}}

" => Searching {{{

" case insensitive search
set ignorecase

" except when query contains uppercase
set smartcase


" }}}

" => Deleting {{{

" backspace over everything in insert mode
set backspace=indent,eol,start

" }}}

" => Substituting {{{

if has('nvim')
  " live preview of substitution in progress
  set inccommand=nosplit
endif


" }}}

" => Visual & UI {{{

" enable syntax highlighting
syntax on

" source colors
source $HOME/.config/vim/colors.vim

" hybrid line numbering
set number relativenumber

if has("patch-8.1.1564")
  " have signcolumn merge with number column
  set signcolumn=number
else
  " enable signcolumn
  set signcolumn=yes
endif

" compress gutter
set numberwidth=3

" disable (duplicate) info about mode
set noshowmode

" a: use all abbreviations available
" I: no splash screen
set shortmess=aI

" set scroll offset to 3 lines
set scrolloff=3

" show matching brackets
set showmatch

" but don't move cursor back
set mat=0

" disable error bells
set noerrorbells
set visualbell
set t_vb=

" for regular vim only
if !has('nvim')
  " solid vertical bar in insert mode
  let &t_SI = "\<Esc>[6 q"
  " solid underscore cursor in replace mode
  let &t_SR = "\<Esc>[4 q"
  " solid block cursor in normal mode
  let &t_EI = "\<Esc>[2 q"
endif

" }}}

" => Behavior & Commands {{{

" enable wildmenu
set wildmenu

" List all matches and complete till the longest common string.
set wildmode=list:longest

" menuone: popup even when there is only 1 match
" noinsert: don't insert until a selection is made
" noselect: don't select an entry by default
set completeopt=menuone,noinsert,noselect

" allow saving files as root when vim not invoked as such
cmap w!! w !sudo tee >/dev/null %

" easy expansion of active file directory
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" unmap F1 from help
map <F1> <Esc>
imap <F1> <Esc>

nnoremap <leader>m :make<CR>
nnoremap <leader>n :noh<CR>
nnoremap <leader>se :setlocal spell! spelllang=en_us<CR>
nnoremap <leader>sg :setlocal spell! spelllang=de_de<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" delete trailing whitespace on save
function! StripTrailingWhitespace()
  " but not on these filetypes
  if &ft =~ 'diff'
    return
  endif

  let l:view = winsaveview()
  keepp %s/\s\+$//e
  call winrestview(l:view)
endfunction
au BufWritePre * silent :call StripTrailingWhitespace()

" no auto-commenting on newline
au FileType * setlocal fo-=c fo-=r fo-=o

" auto read external file changes
set autoread
au BufEnter,CursorHold,FocusGained * checktime

" absolute + relative line numbering when buffer in focus
" absolute line numbering when buffer not in focus
" does not toggle if `number` has been disabled
augroup numbertoggle
  autocmd!
  au BufEnter,FocusGained * if (&number) | set relativenumber | endif
  au BufLeave,FocusLost   * if (&number) | set norelativenumber | endif
augroup END

" }}}

" => File Type Specific Settings {{{

" git commit messages
" turn on spell check in git commits
au FileType gitcommit set spell

" TeX
" default to LaTeX when editing tex files
let g:tex_flavor='latex'

" }}}

" => Security {{{

" disable commands being run from local .vimrcs and .exrcs
set secure

"}}}

" vim: fdm=marker
